{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Lenovo\\\\Desktop\\\\REACT3\\\\my-app\\\\src\\\\leaflet.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { MapContainer, TileLayer, Marker, Popup, Polyline, useMapEvents } from 'react-leaflet';\nimport Leaf from 'leaflet';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GPSMap = () => {\n  _s();\n  const [position, setPosition] = useState([51.505, -0.09]); // Initial position\n  const [trail, setTrail] = useState([]);\n  const customIcon = new Leaf.Icon({\n    // iconUrl:  \"https://freepngimg.com/thumb/car/75694-bird's-eye-car-top-view,plan-view-icon.png\",\n    iconUrl: require('./car.png'),\n    iconSize: [35, 35],\n    iconAnchor: [12, 41],\n    popupAnchor: [1, -34],\n    tooltipAnchor: [16, -28]\n  });\n  useEffect = () => {\n    setInterval = (() => {\n      console.log('salom');\n    }, 5000);\n  };\n\n  // Function to update position randomly for demonstration\n  const updatePosition = () => {\n    const lat = position[0] + Math.random() * 0.01; // Adjust as needed\n    const lng = position[1] + Math.random() * 0.01; // Adjust as needed\n    setPosition([lat, lng]);\n    setTrail(prevTrail => [...prevTrail, [lat, lng]]);\n  };\n\n  // Update position periodically\n  useEffect(() => {\n    const interval = setInterval(updatePosition, 3000); // Adjust interval as needed\n    return () => clearInterval(interval);\n  }, []);\n\n  // Marker that moves continuously\n  const WalkingMarker = () => /*#__PURE__*/_jsxDEV(Marker, {\n    position: position,\n    icon: customIcon,\n    children: /*#__PURE__*/_jsxDEV(Popup, {\n      children: \"You are here\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n  return /*#__PURE__*/_jsxDEV(MapContainer, {\n    center: position,\n    zoom: 13,\n    style: {\n      height: '100vh',\n      width: '100%'\n    },\n    children: [/*#__PURE__*/_jsxDEV(TileLayer, {\n      url: \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\",\n      attribution: \"\\xA9 <a href=\\\"https://www.openstreetmap.org/copyright\\\">OpenStreetMap</a> contributors\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(WalkingMarker, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Polyline, {\n      pathOptions: {\n        color: 'blue'\n      },\n      positions: trail\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this);\n};\n_s(GPSMap, \"mq+FnwNT8stqlvHYInHUp1KNRi0=\");\n_c = GPSMap;\nexport default GPSMap;\nvar _c;\n$RefreshReg$(_c, \"GPSMap\");","map":{"version":3,"names":["React","useState","useEffect","MapContainer","TileLayer","Marker","Popup","Polyline","useMapEvents","Leaf","jsxDEV","_jsxDEV","GPSMap","_s","position","setPosition","trail","setTrail","customIcon","Icon","iconUrl","require","iconSize","iconAnchor","popupAnchor","tooltipAnchor","setInterval","console","log","updatePosition","lat","Math","random","lng","prevTrail","interval","clearInterval","WalkingMarker","icon","children","fileName","_jsxFileName","lineNumber","columnNumber","center","zoom","style","height","width","url","attribution","pathOptions","color","positions","_c","$RefreshReg$"],"sources":["C:/Users/Lenovo/Desktop/REACT3/my-app/src/leaflet.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { MapContainer, TileLayer, Marker, Popup, Polyline, useMapEvents } from 'react-leaflet';\r\nimport Leaf from 'leaflet';\r\n\r\nconst GPSMap = () => {\r\n  const [position, setPosition] = useState([51.505, -0.09]); // Initial position\r\n  const [trail, setTrail] = useState([]);\r\n  const customIcon = new Leaf.Icon({\r\n    // iconUrl:  \"https://freepngimg.com/thumb/car/75694-bird's-eye-car-top-view,plan-view-icon.png\",\r\n    iconUrl:require('./car.png'),\r\n    iconSize: [35, 35],\r\n    iconAnchor: [12, 41],\r\n    popupAnchor: [1, -34],\r\n    tooltipAnchor: [16, -28],\r\n  });\r\n  \r\nuseEffect=(()=>{\r\n    setInterval=(()=>{\r\n        console.log('salom');\r\n   },5000);\r\n})\r\n  \r\n\r\n  // Function to update position randomly for demonstration\r\n  const updatePosition = () => {\r\n    const lat = position[0] + Math.random() * 0.01; // Adjust as needed\r\n    const lng = position[1] + Math.random() * 0.01; // Adjust as needed\r\n    setPosition([lat, lng]);\r\n    setTrail((prevTrail) => [...prevTrail, [lat, lng]]);\r\n  };\r\n\r\n  // Update position periodically\r\n  useEffect(() => {\r\n    const interval = setInterval(updatePosition, 3000); // Adjust interval as needed\r\n    return () => clearInterval(interval);\r\n\r\n  }, []);\r\n\r\n  // Marker that moves continuously\r\n  const WalkingMarker = () => (\r\n    <Marker position={position} icon={customIcon}>\r\n      <Popup>You are here</Popup>\r\n    </Marker>\r\n  );\r\n\r\n  return (\r\n    <MapContainer center={position} zoom={13} style={{ height: '100vh', width: '100%' }}>\r\n      <TileLayer\r\n        url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n        attribution='&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\r\n      />\r\n      <WalkingMarker />\r\n      <Polyline pathOptions={{ color: 'blue' }} positions={trail} />\r\n    </MapContainer>\r\n  );\r\n};\r\n\r\nexport default GPSMap;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}