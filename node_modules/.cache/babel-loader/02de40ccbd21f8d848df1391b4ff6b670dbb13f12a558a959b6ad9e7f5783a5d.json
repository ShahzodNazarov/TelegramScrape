{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Lenovo\\\\Desktop\\\\REACT3\\\\my-app\\\\src\\\\leaflet.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { MapContainer, TileLayer, Marker, Popup, Polyline } from 'react-leaflet';\nimport { useGeolocated } from 'react-geolocated';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GPSMap = ({\n  coords\n}) => {\n  _s();\n  const [position, setPosition] = useState(null);\n  const [route, setRoute] = useState([]);\n  useEffect(() => {\n    if (coords) {\n      const {\n        latitude,\n        longitude\n      } = coords;\n      setPosition([latitude, longitude]);\n    }\n  }, [coords]);\n  const calculateRoute = () => {\n    // Your routing logic here\n  };\n  return /*#__PURE__*/_jsxDEV(MapContainer, {\n    center: position || [51.505, -0.09],\n    zoom: 13,\n    style: {\n      height: '400px',\n      width: '100%'\n    },\n    children: [/*#__PURE__*/_jsxDEV(TileLayer, {\n      url: \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\",\n      attribution: \"\\xA9 <a href=\\\"https://www.openstreetmap.org/copyright\\\">OpenStreetMap</a> contributors\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }, this), position && /*#__PURE__*/_jsxDEV(Marker, {\n      position: position,\n      children: /*#__PURE__*/_jsxDEV(Popup, {\n        children: \"You are here\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 48\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 20\n    }, this), route.length > 0 && /*#__PURE__*/_jsxDEV(Polyline, {\n      positions: route,\n      color: \"blue\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 28\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 5\n  }, this);\n};\n_s(GPSMap, \"p8ZJL83wtgjwESnSh1YQPi56nAc=\");\n_c = GPSMap;\nconst MapWithGeolocation = useGeolocated({\n  positionOptions: {\n    enableHighAccuracy: true\n  },\n  userDecisionTimeout: 5000\n})(GPSMap);\nexport default MapWithGeolocation;\nvar _c;\n$RefreshReg$(_c, \"GPSMap\");","map":{"version":3,"names":["React","useState","useEffect","MapContainer","TileLayer","Marker","Popup","Polyline","useGeolocated","jsxDEV","_jsxDEV","GPSMap","coords","_s","position","setPosition","route","setRoute","latitude","longitude","calculateRoute","center","zoom","style","height","width","children","url","attribution","fileName","_jsxFileName","lineNumber","columnNumber","length","positions","color","_c","MapWithGeolocation","positionOptions","enableHighAccuracy","userDecisionTimeout","$RefreshReg$"],"sources":["C:/Users/Lenovo/Desktop/REACT3/my-app/src/leaflet.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { MapContainer, TileLayer, Marker, Popup, Polyline } from 'react-leaflet';\r\nimport { useGeolocated } from 'react-geolocated';\r\n\r\nconst GPSMap = ({ coords }) => {\r\n  const [position, setPosition] = useState(null);\r\n  const [route, setRoute] = useState([]);\r\n\r\n  useEffect(() => {\r\n    if (coords) {\r\n      const { latitude, longitude } = coords;\r\n      setPosition([latitude, longitude]);\r\n    }\r\n  }, [coords]);\r\n\r\n  const calculateRoute = () => {\r\n    // Your routing logic here\r\n  };\r\n\r\n  return (\r\n    <MapContainer center={position || [51.505, -0.09]} zoom={13} style={{ height: '400px', width: '100%' }}>\r\n      <TileLayer\r\n        url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n        attribution='&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\r\n      />\r\n      {position && <Marker position={position}><Popup>You are here</Popup></Marker>}\r\n      {route.length > 0 && <Polyline positions={route} color=\"blue\" />}\r\n    </MapContainer>\r\n  );\r\n};\r\n\r\nconst MapWithGeolocation = useGeolocated({\r\n  positionOptions: {\r\n    enableHighAccuracy: true,\r\n  },\r\n  userDecisionTimeout: 5000,\r\n})(GPSMap);\r\n\r\nexport default MapWithGeolocation;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,YAAY,EAAEC,SAAS,EAAEC,MAAM,EAAEC,KAAK,EAAEC,QAAQ,QAAQ,eAAe;AAChF,SAASC,aAAa,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEjD,MAAMC,MAAM,GAAGA,CAAC;EAAEC;AAAO,CAAC,KAAK;EAAAC,EAAA;EAC7B,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGd,QAAQ,CAAC,IAAI,CAAC;EAC9C,MAAM,CAACe,KAAK,EAAEC,QAAQ,CAAC,GAAGhB,QAAQ,CAAC,EAAE,CAAC;EAEtCC,SAAS,CAAC,MAAM;IACd,IAAIU,MAAM,EAAE;MACV,MAAM;QAAEM,QAAQ;QAAEC;MAAU,CAAC,GAAGP,MAAM;MACtCG,WAAW,CAAC,CAACG,QAAQ,EAAEC,SAAS,CAAC,CAAC;IACpC;EACF,CAAC,EAAE,CAACP,MAAM,CAAC,CAAC;EAEZ,MAAMQ,cAAc,GAAGA,CAAA,KAAM;IAC3B;EAAA,CACD;EAED,oBACEV,OAAA,CAACP,YAAY;IAACkB,MAAM,EAAEP,QAAQ,IAAI,CAAC,MAAM,EAAE,CAAC,IAAI,CAAE;IAACQ,IAAI,EAAE,EAAG;IAACC,KAAK,EAAE;MAAEC,MAAM,EAAE,OAAO;MAAEC,KAAK,EAAE;IAAO,CAAE;IAAAC,QAAA,gBACrGhB,OAAA,CAACN,SAAS;MACRuB,GAAG,EAAC,oDAAoD;MACxDC,WAAW,EAAC;IAAyF;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACtG,CAAC,EACDlB,QAAQ,iBAAIJ,OAAA,CAACL,MAAM;MAACS,QAAQ,EAAEA,QAAS;MAAAY,QAAA,eAAChB,OAAA,CAACJ,KAAK;QAAAoB,QAAA,EAAC;MAAY;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAO;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,EAC5EhB,KAAK,CAACiB,MAAM,GAAG,CAAC,iBAAIvB,OAAA,CAACH,QAAQ;MAAC2B,SAAS,EAAElB,KAAM;MAACmB,KAAK,EAAC;IAAM;MAAAN,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACpD,CAAC;AAEnB,CAAC;AAACnB,EAAA,CAzBIF,MAAM;AAAAyB,EAAA,GAANzB,MAAM;AA2BZ,MAAM0B,kBAAkB,GAAG7B,aAAa,CAAC;EACvC8B,eAAe,EAAE;IACfC,kBAAkB,EAAE;EACtB,CAAC;EACDC,mBAAmB,EAAE;AACvB,CAAC,CAAC,CAAC7B,MAAM,CAAC;AAEV,eAAe0B,kBAAkB;AAAC,IAAAD,EAAA;AAAAK,YAAA,CAAAL,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}