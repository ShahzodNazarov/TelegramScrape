{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Lenovo\\\\Desktop\\\\REACT3\\\\my-app\\\\src\\\\leaflet2.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { MapContainer, TileLayer, Marker, Popup, Polyline, useMapEvents, Tooltip } from 'react-leaflet';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GPSMap2 = () => {\n  _s();\n  const [position, setPosition] = useState([51.505, -0.09]); // Initial position\n  const [trail, setTrail] = useState([]);\n  const [directions, setDirections] = useState([]);\n\n  // Function to update position randomly for demonstration\n  const updatePosition = () => {\n    const lat = position[0] + Math.random() * 0.01; // Adjust as needed\n    const lng = position[1] + Math.random() * 0.01; // Adjust as needed\n    setPosition([lat, lng]);\n    setTrail(prevTrail => [...prevTrail, [lat, lng]]);\n  };\n\n  // Update position periodically\n  useEffect(() => {\n    const interval = setInterval(updatePosition, 3000); // Adjust interval as needed\n    return () => clearInterval(interval);\n  }, []);\n\n  // Calculate bearing between two points\n  const calculateBearing = (pointA, pointB) => {\n    const lat1 = pointA[0] * Math.PI / 180;\n    const lon1 = pointA[1] * Math.PI / 180;\n    const lat2 = pointB[0] * Math.PI / 180;\n    const lon2 = pointB[1] * Math.PI / 180;\n    const y = Math.sin(lon2 - lon1) * Math.cos(lat2);\n    const x = Math.cos(lat1) * Math.sin(lat2) - Math.sin(lat1) * Math.cos(lat2) * Math.cos(lon2 - lon1);\n    const bearing = Math.atan2(y, x) * 180 / Math.PI;\n    return (bearing + 360) % 360; // Normalize to range [0, 360]\n  };\n\n  // Calculate directions between consecutive points in the trail\n  useEffect(() => {\n    const newDirections = [];\n    for (let i = 0; i < trail.length - 1; i++) {\n      const bearing = calculateBearing(trail[i], trail[i + 1]);\n      newDirections.push(bearing);\n    }\n    setDirections(newDirections);\n  }, [trail]);\n\n  // Marker that moves continuously\n  const WalkingMarker = () => /*#__PURE__*/_jsxDEV(Marker, {\n    position: position,\n    children: /*#__PURE__*/_jsxDEV(Popup, {\n      children: \"You are here\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n  return /*#__PURE__*/_jsxDEV(MapContainer, {\n    center: position,\n    zoom: 13,\n    style: {\n      height: '400px',\n      width: '100%'\n    },\n    children: [/*#__PURE__*/_jsxDEV(TileLayer, {\n      url: \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\",\n      attribution: \"\\xA9 <a href=\\\"https://www.openstreetmap.org/copyright\\\">OpenStreetMap</a> contributors\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(WalkingMarker, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Polyline, {\n      pathOptions: {\n        color: 'blue'\n      },\n      positions: trail\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), directions.map((direction, index) => /*#__PURE__*/_jsxDEV(Marker, {\n      position: trail[index + 1],\n      children: /*#__PURE__*/_jsxDEV(Tooltip, {\n        direction: \"bottom\",\n        offset: [0, 20],\n        children: [direction.toFixed(2), \"\\xB0\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 11\n      }, this)\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n};\n_s(GPSMap2, \"NlDiyAkN76ND+dy4k+YvA4r2DJw=\");\n_c = GPSMap2;\nexport default GPSMap2;\nvar _c;\n$RefreshReg$(_c, \"GPSMap2\");","map":{"version":3,"names":["React","useState","useEffect","MapContainer","TileLayer","Marker","Popup","Polyline","useMapEvents","Tooltip","jsxDEV","_jsxDEV","GPSMap2","_s","position","setPosition","trail","setTrail","directions","setDirections","updatePosition","lat","Math","random","lng","prevTrail","interval","setInterval","clearInterval","calculateBearing","pointA","pointB","lat1","PI","lon1","lat2","lon2","y","sin","cos","x","bearing","atan2","newDirections","i","length","push","WalkingMarker","children","fileName","_jsxFileName","lineNumber","columnNumber","center","zoom","style","height","width","url","attribution","pathOptions","color","positions","map","direction","index","offset","toFixed","_c","$RefreshReg$"],"sources":["C:/Users/Lenovo/Desktop/REACT3/my-app/src/leaflet2.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { MapContainer, TileLayer, Marker, Popup, Polyline, useMapEvents, Tooltip } from 'react-leaflet';\r\n\r\nconst GPSMap2 = () => {\r\n  const [position, setPosition] = useState([51.505, -0.09]); // Initial position\r\n  const [trail, setTrail] = useState([]);\r\n  const [directions, setDirections] = useState([]);\r\n\r\n  // Function to update position randomly for demonstration\r\n  const updatePosition = () => {\r\n    const lat = position[0] + Math.random() * 0.01; // Adjust as needed\r\n    const lng = position[1] + Math.random() * 0.01; // Adjust as needed\r\n    setPosition([lat, lng]);\r\n    setTrail((prevTrail) => [...prevTrail, [lat, lng]]);\r\n  };\r\n\r\n  // Update position periodically\r\n  useEffect(() => {\r\n    const interval = setInterval(updatePosition, 3000); // Adjust interval as needed\r\n    return () => clearInterval(interval);\r\n  }, []);\r\n\r\n  // Calculate bearing between two points\r\n  const calculateBearing = (pointA, pointB) => {\r\n    const lat1 = pointA[0] * Math.PI / 180;\r\n    const lon1 = pointA[1] * Math.PI / 180;\r\n    const lat2 = pointB[0] * Math.PI / 180;\r\n    const lon2 = pointB[1] * Math.PI / 180;\r\n\r\n    const y = Math.sin(lon2 - lon1) * Math.cos(lat2);\r\n    const x = Math.cos(lat1) * Math.sin(lat2) - Math.sin(lat1) * Math.cos(lat2) * Math.cos(lon2 - lon1);\r\n    const bearing = Math.atan2(y, x) * 180 / Math.PI;\r\n    return (bearing + 360) % 360; // Normalize to range [0, 360]\r\n  };\r\n\r\n  // Calculate directions between consecutive points in the trail\r\n  useEffect(() => {\r\n    const newDirections = [];\r\n    for (let i = 0; i < trail.length - 1; i++) {\r\n      const bearing = calculateBearing(trail[i], trail[i + 1]);\r\n      newDirections.push(bearing);\r\n    }\r\n    setDirections(newDirections);\r\n  }, [trail]);\r\n\r\n  // Marker that moves continuously\r\n  const WalkingMarker = () => (\r\n    <Marker position={position}>\r\n      <Popup>You are here</Popup>\r\n    </Marker>\r\n  );\r\n\r\n  return (\r\n    <MapContainer center={position} zoom={13} style={{ height: '400px', width: '100%' }}>\r\n      <TileLayer\r\n        url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n        attribution='&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\r\n      />\r\n      <WalkingMarker />\r\n      <Polyline pathOptions={{ color: 'blue' }} positions={trail} />\r\n      {directions.map((direction, index) => (\r\n        <Marker key={index} position={trail[index + 1]}>\r\n          <Tooltip direction=\"bottom\" offset={[0, 20]}>{direction.toFixed(2)}Â°</Tooltip>\r\n        </Marker>\r\n      ))}\r\n    </MapContainer>\r\n  );\r\n};\r\n\r\nexport default GPSMap2;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,YAAY,EAAEC,SAAS,EAAEC,MAAM,EAAEC,KAAK,EAAEC,QAAQ,EAAEC,YAAY,EAAEC,OAAO,QAAQ,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExG,MAAMC,OAAO,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACpB,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGd,QAAQ,CAAC,CAAC,MAAM,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;EAC3D,MAAM,CAACe,KAAK,EAAEC,QAAQ,CAAC,GAAGhB,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACiB,UAAU,EAAEC,aAAa,CAAC,GAAGlB,QAAQ,CAAC,EAAE,CAAC;;EAEhD;EACA,MAAMmB,cAAc,GAAGA,CAAA,KAAM;IAC3B,MAAMC,GAAG,GAAGP,QAAQ,CAAC,CAAC,CAAC,GAAGQ,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC;IAChD,MAAMC,GAAG,GAAGV,QAAQ,CAAC,CAAC,CAAC,GAAGQ,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC;IAChDR,WAAW,CAAC,CAACM,GAAG,EAAEG,GAAG,CAAC,CAAC;IACvBP,QAAQ,CAAEQ,SAAS,IAAK,CAAC,GAAGA,SAAS,EAAE,CAACJ,GAAG,EAAEG,GAAG,CAAC,CAAC,CAAC;EACrD,CAAC;;EAED;EACAtB,SAAS,CAAC,MAAM;IACd,MAAMwB,QAAQ,GAAGC,WAAW,CAACP,cAAc,EAAE,IAAI,CAAC,CAAC,CAAC;IACpD,OAAO,MAAMQ,aAAa,CAACF,QAAQ,CAAC;EACtC,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMG,gBAAgB,GAAGA,CAACC,MAAM,EAAEC,MAAM,KAAK;IAC3C,MAAMC,IAAI,GAAGF,MAAM,CAAC,CAAC,CAAC,GAAGR,IAAI,CAACW,EAAE,GAAG,GAAG;IACtC,MAAMC,IAAI,GAAGJ,MAAM,CAAC,CAAC,CAAC,GAAGR,IAAI,CAACW,EAAE,GAAG,GAAG;IACtC,MAAME,IAAI,GAAGJ,MAAM,CAAC,CAAC,CAAC,GAAGT,IAAI,CAACW,EAAE,GAAG,GAAG;IACtC,MAAMG,IAAI,GAAGL,MAAM,CAAC,CAAC,CAAC,GAAGT,IAAI,CAACW,EAAE,GAAG,GAAG;IAEtC,MAAMI,CAAC,GAAGf,IAAI,CAACgB,GAAG,CAACF,IAAI,GAAGF,IAAI,CAAC,GAAGZ,IAAI,CAACiB,GAAG,CAACJ,IAAI,CAAC;IAChD,MAAMK,CAAC,GAAGlB,IAAI,CAACiB,GAAG,CAACP,IAAI,CAAC,GAAGV,IAAI,CAACgB,GAAG,CAACH,IAAI,CAAC,GAAGb,IAAI,CAACgB,GAAG,CAACN,IAAI,CAAC,GAAGV,IAAI,CAACiB,GAAG,CAACJ,IAAI,CAAC,GAAGb,IAAI,CAACiB,GAAG,CAACH,IAAI,GAAGF,IAAI,CAAC;IACnG,MAAMO,OAAO,GAAGnB,IAAI,CAACoB,KAAK,CAACL,CAAC,EAAEG,CAAC,CAAC,GAAG,GAAG,GAAGlB,IAAI,CAACW,EAAE;IAChD,OAAO,CAACQ,OAAO,GAAG,GAAG,IAAI,GAAG,CAAC,CAAC;EAChC,CAAC;;EAED;EACAvC,SAAS,CAAC,MAAM;IACd,MAAMyC,aAAa,GAAG,EAAE;IACxB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG5B,KAAK,CAAC6B,MAAM,GAAG,CAAC,EAAED,CAAC,EAAE,EAAE;MACzC,MAAMH,OAAO,GAAGZ,gBAAgB,CAACb,KAAK,CAAC4B,CAAC,CAAC,EAAE5B,KAAK,CAAC4B,CAAC,GAAG,CAAC,CAAC,CAAC;MACxDD,aAAa,CAACG,IAAI,CAACL,OAAO,CAAC;IAC7B;IACAtB,aAAa,CAACwB,aAAa,CAAC;EAC9B,CAAC,EAAE,CAAC3B,KAAK,CAAC,CAAC;;EAEX;EACA,MAAM+B,aAAa,GAAGA,CAAA,kBACpBpC,OAAA,CAACN,MAAM;IAACS,QAAQ,EAAEA,QAAS;IAAAkC,QAAA,eACzBrC,OAAA,CAACL,KAAK;MAAA0C,QAAA,EAAC;IAAY;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAO;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACrB,CACT;EAED,oBACEzC,OAAA,CAACR,YAAY;IAACkD,MAAM,EAAEvC,QAAS;IAACwC,IAAI,EAAE,EAAG;IAACC,KAAK,EAAE;MAAEC,MAAM,EAAE,OAAO;MAAEC,KAAK,EAAE;IAAO,CAAE;IAAAT,QAAA,gBAClFrC,OAAA,CAACP,SAAS;MACRsD,GAAG,EAAC,oDAAoD;MACxDC,WAAW,EAAC;IAAyF;MAAAV,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACtG,CAAC,eACFzC,OAAA,CAACoC,aAAa;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACjBzC,OAAA,CAACJ,QAAQ;MAACqD,WAAW,EAAE;QAAEC,KAAK,EAAE;MAAO,CAAE;MAACC,SAAS,EAAE9C;IAAM;MAAAiC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,EAC7DlC,UAAU,CAAC6C,GAAG,CAAC,CAACC,SAAS,EAAEC,KAAK,kBAC/BtD,OAAA,CAACN,MAAM;MAAaS,QAAQ,EAAEE,KAAK,CAACiD,KAAK,GAAG,CAAC,CAAE;MAAAjB,QAAA,eAC7CrC,OAAA,CAACF,OAAO;QAACuD,SAAS,EAAC,QAAQ;QAACE,MAAM,EAAE,CAAC,CAAC,EAAE,EAAE,CAAE;QAAAlB,QAAA,GAAEgB,SAAS,CAACG,OAAO,CAAC,CAAC,CAAC,EAAC,MAAC;MAAA;QAAAlB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAS;IAAC,GADnEa,KAAK;MAAAhB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAEV,CACT,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACU,CAAC;AAEnB,CAAC;AAACvC,EAAA,CAhEID,OAAO;AAAAwD,EAAA,GAAPxD,OAAO;AAkEb,eAAeA,OAAO;AAAC,IAAAwD,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}