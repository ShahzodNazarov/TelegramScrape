{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Lenovo\\\\Desktop\\\\REACT3\\\\my-app\\\\src\\\\google.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport DG from \"2gis-maps\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Google = () => {\n  _s();\n  const [map, setMap] = useState(null);\n  useEffect(() => {\n    // Initialize the map\n    const mapInstance = new DG.Map(\"map\", {\n      center: [55.751244, 37.618423],\n      // Moscow coordinates\n      zoom: 10 // Initial zoom level\n    });\n\n    // Add marker to the map\n    const marker = DG.marker([55.751244, 37.618423]).addTo(mapInstance).bindPopup(\"Moscow\");\n\n    // Set map instance in state\n    setMap(mapInstance);\n\n    // Cleanup function\n    return () => {\n      // Remove marker when component unmounts\n      if (mapInstance.hasLayer(marker)) {\n        mapInstance.removeLayer(marker);\n      }\n    };\n  }, []); // Empty dependency array ensures this effect runs only once after initial render\n\n  useEffect(() => {\n    if (map) {\n      // Change placemark after 5 seconds\n      const timeoutId = setTimeout(() => {\n        const newCoordinates = [40.7128, -74.006]; // New York coordinates\n        map.panTo(newCoordinates);\n        map.eachLayer(function (layer) {\n          if (layer instanceof DG.Marker) {\n            layer.setLatLng(newCoordinates);\n          }\n        });\n      }, 5000);\n\n      // Cleanup function\n      return () => clearTimeout(timeoutId);\n    }\n  }, [map]); // Dependency on the map instance\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"map\",\n    style: {\n      width: \"100%\",\n      height: \"400px\"\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 10\n  }, this);\n};\n_s(Google, \"zO+w5/RDv0BZF/+PcyE/nH1Y2dc=\");\n_c = Google;\nexport default Google;\nvar _c;\n$RefreshReg$(_c, \"Google\");","map":{"version":3,"names":["React","useEffect","useState","DG","jsxDEV","_jsxDEV","Google","_s","map","setMap","mapInstance","Map","center","zoom","marker","addTo","bindPopup","hasLayer","removeLayer","timeoutId","setTimeout","newCoordinates","panTo","eachLayer","layer","Marker","setLatLng","clearTimeout","id","style","width","height","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Lenovo/Desktop/REACT3/my-app/src/google.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport DG from \"2gis-maps\";\r\n\r\nconst Google = () => {\r\n  const [map, setMap] = useState(null);\r\n\r\n  useEffect(() => {\r\n    // Initialize the map\r\n    const mapInstance = new DG.Map(\"map\", {\r\n      center: [55.751244, 37.618423], // Moscow coordinates\r\n      zoom: 10, // Initial zoom level\r\n    });\r\n\r\n    // Add marker to the map\r\n    const marker = DG.marker([55.751244, 37.618423])\r\n      .addTo(mapInstance)\r\n      .bindPopup(\"Moscow\");\r\n\r\n    // Set map instance in state\r\n    setMap(mapInstance);\r\n\r\n    // Cleanup function\r\n    return () => {\r\n      // Remove marker when component unmounts\r\n      if (mapInstance.hasLayer(marker)) {\r\n        mapInstance.removeLayer(marker);\r\n      }\r\n    };\r\n  }, []); // Empty dependency array ensures this effect runs only once after initial render\r\n\r\n  useEffect(() => {\r\n    if (map) {\r\n      // Change placemark after 5 seconds\r\n      const timeoutId = setTimeout(() => {\r\n        const newCoordinates = [40.7128, -74.006]; // New York coordinates\r\n        map.panTo(newCoordinates);\r\n        map.eachLayer(function (layer) {\r\n          if (layer instanceof DG.Marker) {\r\n            layer.setLatLng(newCoordinates);\r\n          }\r\n        });\r\n      }, 5000);\r\n\r\n      // Cleanup function\r\n      return () => clearTimeout(timeoutId);\r\n    }\r\n  }, [map]); // Dependency on the map instance\r\n\r\n  return <div id=\"map\" style={{ width: \"100%\", height: \"400px\" }}></div>;\r\n};\r\n\r\nexport default Google;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,EAAE,MAAM,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE3B,MAAMC,MAAM,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACnB,MAAM,CAACC,GAAG,EAAEC,MAAM,CAAC,GAAGP,QAAQ,CAAC,IAAI,CAAC;EAEpCD,SAAS,CAAC,MAAM;IACd;IACA,MAAMS,WAAW,GAAG,IAAIP,EAAE,CAACQ,GAAG,CAAC,KAAK,EAAE;MACpCC,MAAM,EAAE,CAAC,SAAS,EAAE,SAAS,CAAC;MAAE;MAChCC,IAAI,EAAE,EAAE,CAAE;IACZ,CAAC,CAAC;;IAEF;IACA,MAAMC,MAAM,GAAGX,EAAE,CAACW,MAAM,CAAC,CAAC,SAAS,EAAE,SAAS,CAAC,CAAC,CAC7CC,KAAK,CAACL,WAAW,CAAC,CAClBM,SAAS,CAAC,QAAQ,CAAC;;IAEtB;IACAP,MAAM,CAACC,WAAW,CAAC;;IAEnB;IACA,OAAO,MAAM;MACX;MACA,IAAIA,WAAW,CAACO,QAAQ,CAACH,MAAM,CAAC,EAAE;QAChCJ,WAAW,CAACQ,WAAW,CAACJ,MAAM,CAAC;MACjC;IACF,CAAC;EACH,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAERb,SAAS,CAAC,MAAM;IACd,IAAIO,GAAG,EAAE;MACP;MACA,MAAMW,SAAS,GAAGC,UAAU,CAAC,MAAM;QACjC,MAAMC,cAAc,GAAG,CAAC,OAAO,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC;QAC3Cb,GAAG,CAACc,KAAK,CAACD,cAAc,CAAC;QACzBb,GAAG,CAACe,SAAS,CAAC,UAAUC,KAAK,EAAE;UAC7B,IAAIA,KAAK,YAAYrB,EAAE,CAACsB,MAAM,EAAE;YAC9BD,KAAK,CAACE,SAAS,CAACL,cAAc,CAAC;UACjC;QACF,CAAC,CAAC;MACJ,CAAC,EAAE,IAAI,CAAC;;MAER;MACA,OAAO,MAAMM,YAAY,CAACR,SAAS,CAAC;IACtC;EACF,CAAC,EAAE,CAACX,GAAG,CAAC,CAAC,CAAC,CAAC;;EAEX,oBAAOH,OAAA;IAAKuB,EAAE,EAAC,KAAK;IAACC,KAAK,EAAE;MAAEC,KAAK,EAAE,MAAM;MAAEC,MAAM,EAAE;IAAQ;EAAE;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAM,CAAC;AACxE,CAAC;AAAC5B,EAAA,CA9CID,MAAM;AAAA8B,EAAA,GAAN9B,MAAM;AAgDZ,eAAeA,MAAM;AAAC,IAAA8B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}